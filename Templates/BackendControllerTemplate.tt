<#  //To create runtime template change the custom tool proterty of the template from
// TextTemplatingFileGenerator to TextTemplatingFilePreprocessor
//If there is some error with sqldataclient use 
//"dotnet add package Microsoft.Data.SqlClient" to add the package
#>

<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Template.Models;
using Template.Templates;
using System;
using System.Collections.Generic;
using Microsoft.Data.SqlClient;

namespace Template.Controllers
{
    public class <#=this.ControllerName#>Controller : Controller
    {
      

        [HttpGet]
        public async Task<IActionResult> Get([FromBody]<#=this.ControllerName#>Model md)
		{
			try
			{
					SqlParameter[] param = { 
                        new SqlParameter("@TokenNo", md.TokenNo)
                    };
					//string Response = await ApiCall.ApiCallWithObject("<#=this.ControllerName#>/Get", TokenNo, "Get");
					return StatusCode(StatusCodes.Status200OK, Response);
				
			}
			catch (Exception ex)
			{
				string Exception = ex.ToString();
				return StatusCode(StatusCodes.Status417ExpectationFailed,Exception);
			}
		}

        [HttpGet]
        public async Task<IActionResult> GetByID([FromBody]<#=this.ControllerName#>Model md)
		{
			try
			{
					SqlParameter[] param = { 
                        new SqlParameter("@TokenNo", md.TokenNo),
						new SqlParameter("@GUID", md.GUID)
                    };
					//string Response = await ApiCall.ApiCallWithObject("<#=this.ControllerName#>/GetByID?id=" + id, TokenNo, "Get");
					return StatusCode(StatusCodes.Status200OK, Response);
				
			}
			catch (Exception ex)
			{
				string Exception = ex.ToString();
				return StatusCode(StatusCodes.Status417ExpectationFailed,Exception);
			}
		}

		


        [HttpPost]
        public async Task<IActionResult> InsertUpdate([FromBody]<#=this.ControllerName#>Model md )
        {
            try{
                string TokenNo = HttpContext.Session.GetString("TokenNo");
                
                     SqlParameter[] parm2 = { 
					     <# foreach (var column in this.Columns) { #>
<#
               if(!column.Exclude){
			   #>
						 new SqlParameter("@<#=column.ColumnName#>", md.<#=column.ColumnName#>),
						<#
						}
					}
					#>
                       
                    };
                    //string Response = await ApiCall.ApiCallWithObject("<#=this.ControllerName#>/Create", md, "Post");
                    return StatusCode(StatusCodes.Status200OK,Response);
                
            }
             catch (Exception ex)
            {
                string Exception = ex.ToString();
                return StatusCode(StatusCodes.Status417ExpectationFailed,Exception);
            }
		}

        [HttpDelete]
		public async Task<IActionResult> Delete([FromBody]<#=this.ControllerName#>Model md)
		{
			try
			{
					SqlParameter[] param = { 
                        new SqlParameter("@TokenNo", md.TokenNo),
						new SqlParameter("@GUID", md.GUID)
                    };
					//string Response = await ApiCall.ApiCallWithObject("<#=this.ControllerName#>/Delete?id=" + id, TokenNo, "Delete");
					return StatusCode(StatusCodes.Status200OK, Response);
				
			}
			catch (Exception ex)
			{
				string Exception = ex.ToString();
				return StatusCode(StatusCodes.Status417ExpectationFailed,Exception);
			}
		}
		
    }
}